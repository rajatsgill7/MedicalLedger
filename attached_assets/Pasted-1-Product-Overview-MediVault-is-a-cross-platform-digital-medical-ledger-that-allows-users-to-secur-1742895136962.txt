1. Product Overview
MediVault is a cross-platform digital medical ledger that allows users to securely store and manage their medical history while providing controlled access to doctors and hospitals. The key focus is on security, privacy, and user-friendliness, ensuring that:
    ‚Ä¢ Users can upload, download, and archive their medical records.
    ‚Ä¢ Doctors can log in, create records, and request access to user data.
    ‚Ä¢ Medical data is private and can only be accessed with user approval.
    ‚Ä¢ Data cannot be edited unless both the doctor and user approve.
    ‚Ä¢ Security and compliance (encryption, access control, and audit logs) are top priorities.

2. Key Features & Functionalities
üßë‚Äçüíª User Features
‚úÖ Registration & Login (via AWS Cognito / OAuth 2.0)
‚úÖ Upload Medical Records (manual entry, file upload, API integration)
‚úÖ Download & Archive Data (GDPR-like compliance for privacy)
‚úÖ Grant/Revoke Doctor Access (time-limited access for doctors)
‚úÖ View Medical History (secure access to past records)
‚úÖ Approve or Reject Modifications (doctor requests changes, user must approve)
‚úÖ Security & Privacy Controls (full encryption, audit logs, MFA authentication)
üë®‚Äç‚öïÔ∏è Doctor Features
‚úÖ Doctor Login & Role-based Access
‚úÖ Request Access to a User‚Äôs Data (must be approved by user)
‚úÖ Upload Medical Records (prescriptions, diagnoses, reports)
‚úÖ Link Uploaded Records to Users
‚úÖ Cannot Edit Medical Records (without explicit user approval)
‚úÖ Limited-Time Access (auto-revoked after the granted period)
üè• Admin (Hospital) Features
‚úÖ Manage Doctor Accounts (add, verify, suspend doctors)
‚úÖ View Access Logs (who accessed what data, when)
‚úÖ Ensure Compliance & Security Policies (privacy regulations)

3. Technical Implementation
üõ† Tech Stack
    ‚Ä¢ Frontend: Flutter (cross-platform mobile app)
    ‚Ä¢ Backend: Node.js (Express/NestJS) on AWS Lambda or EC2
    ‚Ä¢ Database: AWS RDS (PostgreSQL/MySQL) or DynamoDB
    ‚Ä¢ Authentication: AWS Cognito (OAuth 2.0) with Role-Based Access Control (RBAC)
    ‚Ä¢ File Storage: AWS S3 (for medical reports, images, scanned documents)
    ‚Ä¢ Encryption: AWS KMS (for data encryption at rest and in transit)
    ‚Ä¢ Access Control: JWT-based authentication with temporary access tokens
üîê Data Storage & Security
    ‚Ä¢ Users & Doctors Table: Stores login credentials, roles, and personal details
    ‚Ä¢ Medical Records Table: Stores links to uploaded files and metadata
    ‚Ä¢ Record Access Table: Tracks access granted to doctors (expiry-based)
    ‚Ä¢ AWS Textract (OCR): Extracts text from uploaded PDFs & images
    ‚Ä¢ FHIR/HL7 API Support: For structured hospital data integration
    ‚Ä¢ Audit Logging: To track access and modifications
üîÑ Data Flow & Access Mechanism
    1. User/Doctor Login: Secure authentication using AWS Cognito
    2. Data Upload:
        ‚ó¶ Users upload files via Flutter ‚Üí Stored in AWS S3
        ‚ó¶ Doctors upload medical records ‚Üí Linked to users
        ‚ó¶ OCR (AWS Textract) extracts text from images/PDFs
    3. Data Access:
        ‚ó¶ Doctors request access ‚Üí Users approve
        ‚ó¶ Access is granted for a limited time (revocable)
    4. Data Modification:
        ‚ó¶ Doctors suggest edits ‚Üí Users approve/reject
        ‚ó¶ No direct modifications without both user & doctor approval

4. Security & Compliance
‚úî Data Encryption: AWS KMS encrypts data at rest & in transit
‚úî Role-Based Access: Users, doctors, and admins have different permissions
‚úî MFA Authentication: Secure login with optional Multi-Factor Authentication
‚úî Audit Logs: Track all access and modifications
‚úî Access Expiry: Doctor access is auto-revoked after a set period
‚úî GDPR & HIPAA Compliance: Users can download or delete their data
‚úî API Security: JWT-based access control, HTTPS for all communications



